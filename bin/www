#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketio:server');
var http = require('http');
var socketio = require('socket.io')
const faker = require('faker')
const _ = require('lodash')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//socket.io
let users = [];
let rooms = {
  'HN':[],
  'HCM':[]
}

const io = socketio(server);
io.on('connection', (socket) => {
  socket.myrooms=[]
  socket.otherRoom =[]
  let allRooms = Object.keys(socket.adapter.rooms);
  socket.name = faker.name.findName()
  users.push({ name: socket.name, id: socket.id })
  //here

  socket.on('getUsers', () => {
    io.emit('getUsers', users)

  })


  socket.broadcast.emit('connected', socket.name);
  io.to(socket.id).emit('userConnected', socket.name);

  io.to(socket.id).emit('getMyRooms',  socket.myrooms);

  io.to(socket.id).emit('getOtherRooms', Object.keys(rooms));

  socket.on('disconnect', () => {
    users = _.filter(users, (user) => {
      user.id != socket.id
    })
    // io.emit('getUsers',users)
    io.emit('disconnected', socket.name)
  });
  socket.on('chat-message', (msg) => {
    io.emit('chat-message', { name: socket.name, msg });
  });

  socket.on('typing', (isTyping) => {
    if (isTyping === true) {
      socket.broadcast.emit('typing', socket.name);
    }

    else {
      socket.broadcast.emit('typing', '');
    }
  })


  socket.on('create-room', roomName => {
    socket.name=roomName
    socket.join(roomName)
    if(allRooms.includes(roomName)){
      rooms[roomName].push(socket.name)
    }else{
      rooms[roomName] = [socket.name]
    }



    // for (const key in rooms) {
    //   if(rooms[key].includes(socket.name))  socket.myrooms.push(key)
    // }
    // console.log(socket.otherRoom)
    // io.to(socket.id).emit('getMyRooms',  socket.myrooms);
    // io.to(socket.id).emit('getOtherRooms', socket.otherRoom);
  })
});






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
